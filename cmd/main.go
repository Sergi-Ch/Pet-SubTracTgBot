package main

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Subscription struct {
	Name      string
	Frequency string
	StartDate time.Time
	Price     float64
}

var (
	bot               *tgbotapi.BotAPI
	userSubscriptions = make(map[int64]map[int]Subscription)
	userTempData      = make(map[int64]Subscription)
	userState         = make(map[int64]string)
	lastSubID         = 0
)

func main() {
	var err error
	bot, err = tgbotapi.NewBotAPI("7275468201:AAGj7YiXAPmkzfJqbCn4anao3mnlJNk0Iqg")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(update)
		} else if update.CallbackQuery != nil {
			handleCallback(update)
		}
	}
}

func handleMessage(update tgbotapi.Update) {
	userID := update.Message.From.ID
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	switch userState[userID] {
	case "waiting_name":
		userTempData[userID] = Subscription{Name: update.Message.Text}
		userState[userID] = "waiting_frequency"
		msg.Text = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ–ø–ª–∞—Ç—ã:"
		msg.ReplyMarkup = createFrequencyKeyboard()
	case "waiting_price":
		price, err := strconv.ParseFloat(update.Message.Text, 64)
		if err != nil {
			msg.Text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
		} else {
			sub := userTempData[userID]
			sub.Price = price
			userState[userID] = "waiting_date"
			userTempData[userID] = sub
			msg.Text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):"
		}
	case "waiting_date":
		date, err := time.Parse("02.01.2006", update.Message.Text)
		if err != nil {
			msg.Text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:"
		} else {
			sub := userTempData[userID]
			sub.StartDate = date
			addSubscription(userID, sub)
			userState[userID] = ""
			msg.Text = "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
			msg.ReplyMarkup = createMainKeyboard()
		}
	default:
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg.Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
				msg.ReplyMarkup = createMainKeyboard()
			case "help":
				msg.Text = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
			case "list":
				msg.Text = listSubscriptions(userID)
				msg.ReplyMarkup = createDeleteKeyboard(userID)
			}
		}
	}

	if _, err := bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func handleCallback(update tgbotapi.Update) {
	userID := update.CallbackQuery.From.ID
	data := update.CallbackQuery.Data
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "")

	switch {
	case data == "add_sub":
		userState[userID] = "waiting_name"
		msg.Text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:"
	case data == "list_subs":
		msg.Text = listSubscriptions(userID)
		msg.ReplyMarkup = createDeleteKeyboard(userID)
	case data == "main_menu":
		msg.Text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
		msg.ReplyMarkup = createMainKeyboard()
	case data == "show_stats":
		monthly, yearly := calculateStats(userID)
		msg.Text = fmt.Sprintf("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ï–∂–µ–º–µ—Å—è—á–Ω–æ: %.2f —Ä—É–±\n–ï–∂–µ–≥–æ–¥–Ω–æ: %.2f —Ä—É–±", monthly, yearly)
		msg.ReplyMarkup = createMainKeyboard()
	case data == "next_payment":
		sub, date := findNextPayment(userID)
		if sub.Name == "" {
			msg.Text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
		} else {
			msg.Text = fmt.Sprintf("‚è≥ –ë–ª–∏–∂–∞–π—à–∏–π –ø–ª–∞—Ç–µ–∂:\n%s - %.2f —Ä—É–±\n–î–∞—Ç–∞: %s",
				sub.Name, sub.Price, date.Format("02.01.2006"))
		}
		msg.ReplyMarkup = createMainKeyboard()
	case data == "set_freq_month" || data == "set_freq_year":
		sub := userTempData[userID]
		if data == "set_freq_month" {
			sub.Frequency = "month"
		} else {
			sub.Frequency = "year"
		}
		userTempData[userID] = sub
		userState[userID] = "waiting_price"
		msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö:"
	case strings.HasPrefix(data, "delete_"):
		subID, err := strconv.Atoi(strings.TrimPrefix(data, "delete_"))
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–¥–ø–∏—Å–∫–∏"
			break
		}

		if _, userExists := userSubscriptions[userID]; !userExists {
			msg.Text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
		} else if _, subExists := userSubscriptions[userID][subID]; !subExists {
			msg.Text = fmt.Sprintf("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ #%d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", subID)
		} else {
			delete(userSubscriptions[userID], subID)
			msg.Text = fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ #%d —É–¥–∞–ª–µ–Ω–∞", subID)

			if len(userSubscriptions[userID]) == 0 {
				delete(userSubscriptions, userID)
			}
		}
		msg.ReplyMarkup = createMainKeyboard()
	}

	if _, err := bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}

	callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
	if _, err := bot.Request(callback); err != nil {
		log.Printf("Error answering callback: %v", err)
	}
}

func createMainKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "add_sub"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫", "list_subs"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "show_stats"),
			tgbotapi.NewInlineKeyboardButtonData("‚è≥ –ë–ª–∏–∂–∞–π—à–µ–µ", "next_payment"),
		),
	)
}

func createFrequencyKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "set_freq_month"),
			tgbotapi.NewInlineKeyboardButtonData("–ï–∂–µ–≥–æ–¥–Ω–æ", "set_freq_year"),
		),
	)
}

func createDeleteKeyboard(userID int64) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	if subs, exists := userSubscriptions[userID]; exists {
		for subID, sub := range subs {
			btn := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("‚ùå %s (%.2f —Ä—É–±)", sub.Name, sub.Price),
				fmt.Sprintf("delete_%d", subID),
			)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "main_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func addSubscription(userID int64, sub Subscription) {
	lastSubID++
	if userSubscriptions[userID] == nil {
		userSubscriptions[userID] = make(map[int]Subscription)
	}
	userSubscriptions[userID][lastSubID] = sub
}

func listSubscriptions(userID int64) string {
	if len(userSubscriptions[userID]) == 0 {
		return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
	}

	var sb strings.Builder
	sb.WriteString("üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n")
	for _, sub := range userSubscriptions[userID] {
		sb.WriteString(fmt.Sprintf(" %s\n", sub.Name))
		sb.WriteString(fmt.Sprintf("   üí∞ –¶–µ–Ω–∞: %.2f —Ä—É–±/%s\n", sub.Price, frequencyToRussian(sub.Frequency)))
		sb.WriteString(fmt.Sprintf("   üóì –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂: %s\n\n",
			nextPaymentDate(sub.StartDate, sub.Frequency).Format("02.01.2006")))
	}
	return sb.String()
}

func frequencyToRussian(freq string) string {
	if freq == "month" {
		return "–º–µ—Å—è—Ü"
	}
	return "–≥–æ–¥"
}

func nextPaymentDate(startDate time.Time, frequency string) time.Time {
	now := time.Now()
	next := startDate
	for next.Before(now) {
		if frequency == "month" {
			next = next.AddDate(0, 1, 0)
		} else {
			next = next.AddDate(1, 0, 0)
		}
	}
	return next
}

func calculateStats(userID int64) (monthly, yearly float64) {
	for _, sub := range userSubscriptions[userID] {
		if sub.Frequency == "month" {
			monthly += sub.Price
			yearly += sub.Price * 12
		} else {
			yearly += sub.Price
			monthly += sub.Price / 12
		}
	}
	return
}

func findNextPayment(userID int64) (Subscription, time.Time) {
	var nextSub Subscription
	var nextDate time.Time
	now := time.Now()

	for _, sub := range userSubscriptions[userID] {
		next := sub.StartDate
		for next.Before(now) {
			if sub.Frequency == "month" {
				next = next.AddDate(0, 1, 0)
			} else {
				next = next.AddDate(1, 0, 0)
			}
		}

		if nextDate.IsZero() || next.Before(nextDate) {
			nextDate = next
			nextSub = sub
		}
	}

	return nextSub, nextDate
}
